{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "txHash": "0x69975c725d9aaa0f5497137a1860e4a5ca6fdc79cdb182105c36dc5afd2cf9e9"
  },
  "proxies": [
    {
      "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
      "txHash": "0x4417567fa9c5a1cc6b5127463e68646b1c02cceb8f272358a58567595712987e",
      "kind": "transparent"
    },
    {
      "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
      "txHash": "0xca9a1dc5dd6ead6f794a82988f426244bfa76eacdfbd8db2972a172ec407971f",
      "kind": "transparent"
    },
    {
      "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
      "txHash": "0x1c7047508a36489ad2aa1441d74939ee616ede3627a61dc41fab2006d69bc133",
      "kind": "transparent"
    }
  ],
  "impls": {
    "e660bff14346979f76f166dbc51c69d1425ba5e5ceb41f84305b3cf406a64799": {
      "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
      "txHash": "0xb3570869d31fc2d40696409f48d01081a39ec3955e56715737055464c848ba38",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:10"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:15"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\introspection\\ERC165Upgradeable.sol:36"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\ERC721Upgradeable.sol:431"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:25"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:28"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "153",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:31"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "154",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:34"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "155",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\token\\ERC721\\extensions\\ERC721EnumerableUpgradeable.sol:172"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "201",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "202",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:82"
          },
          {
            "label": "executor",
            "offset": 0,
            "slot": "251",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:23"
          },
          {
            "label": "tokenIdIndex",
            "offset": 0,
            "slot": "252",
            "type": "t_uint256",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:27"
          },
          {
            "label": "_baseURI_",
            "offset": 0,
            "slot": "253",
            "type": "t_string_storage",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:29"
          },
          {
            "label": "FISH",
            "offset": 0,
            "slot": "254",
            "type": "t_address",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:31"
          },
          {
            "label": "maxPreSale",
            "offset": 0,
            "slot": "255",
            "type": "t_uint256",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:32"
          },
          {
            "label": "preSaleEnd",
            "offset": 0,
            "slot": "256",
            "type": "t_uint256",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:33"
          },
          {
            "label": "stateOpen",
            "offset": 0,
            "slot": "257",
            "type": "t_bool",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:34"
          },
          {
            "label": "releaseCycle",
            "offset": 0,
            "slot": "258",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:58"
          },
          {
            "label": "_nftInfo",
            "offset": 0,
            "slot": "259",
            "type": "t_mapping(t_uint256,t_struct(NftInfo)4133_storage)",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:60"
          },
          {
            "label": "_userInfo",
            "offset": 0,
            "slot": "260",
            "type": "t_mapping(t_address,t_struct(UserInfo)4124_storage)",
            "contract": "FishNft",
            "src": "contracts\\FishNft.sol:62"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UserInfo)4124_storage)": {
            "label": "mapping(address => struct FishNft.UserInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(NftInfo)4133_storage)": {
            "label": "mapping(uint256 => struct FishNft.NftInfo)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(NftInfo)4133_storage": {
            "label": "struct FishNft.NftInfo",
            "members": [
              {
                "label": "fishStr",
                "type": "t_string_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "remainingReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "lv",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "random",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(UserInfo)4124_storage": {
            "label": "struct FishNft.UserInfo",
            "members": [
              {
                "label": "lastClaimTimestamp",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "releaseSecond",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "claimble",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      }
    }
  }
}
